<?php

namespace Guzzle\Service\Description;

use Guzzle\Common\Collection;
use Guzzle\Inflection\Inflector;
use Guzzle\Service\Exception\ValidationException;
use Guzzle\Service\Inspector;

/**
 * Data object holding the information of an API command
 */
class ApiCommand implements ApiCommandInterface
{
    /**
     * @var string Default command class to use when none is specified
     */
    const DEFAULT_COMMAND_CLASS = 'Guzzle\\Service\\Command\\DynamicCommand';

    /**
     * @var array Parameters
     */
    protected $params = array();

    /**
     * @var string Name of the command
     */
    protected $name;

    /**
     * @var string Documentation
     */
    protected $description;

    /**
     * @var string Reference URL of the command
     */
    protected $description_url;

    /**
     * @var string HTTP method
     */
    protected $method;

    /**
     * @var string HTTP URI of the command
     */
    protected $uri;

    /**
     * @var string Class of the command object
     */
    protected $class;

    /**
     * @var string Result type generated by the command
     */
    protected $result_type;

    /**
     * @var string Result type generated by the command
     */
    protected $result_description;

    /**
     * @var bool Whether or not the command is deprecated
     */
    protected $deprecated;

    /**
     * @var array Array of errors that could occur when running the command
     */
    protected $errors;

    /**
     * Builds an ApiCommand object using an array of configuration data:
     * - name:               (string) Name of the command
     * - method:             (string) HTTP method of the command
     * - uri:                (string) URI template that can create a relative or absolute URL
     * - class:              (string) Concrete class that implements this command
     * - params:             (array) Associative array of parameters for the command. {@see ApiParam} for information.
     * - description:        (string) Method documentation
     * - description_url:    (string) URL pointing to an online reference about the command
     * - result_type:        (string) Result type (e.g. array, Foo\\Baz\\Bar, etc)
     * - result_description: (string) Description of the result
     * - deprecated:         (bool) Set to true if this is a deprecated command
     * - errors:             (array)  Errors that could occur when executing the command. Array of hashes, each with a
     *                       'code' (the HTTP response code), 'phrase' (response reason phrase or description of the
     *                       error), and 'class' (a custom exception class that would be thrown if the error is
     *                       encountered).
     *
     * @param array $config Array of configuration data
     */
    public function __construct(array $config = array())
    {
        foreach ($config as $key => $value) {
            $this->{$key} = $value;
        }

        $this->uri = $this->uri ?: '';
        $this->class = $this->class ?: self::DEFAULT_COMMAND_CLASS;
        $this->deprecated = (bool) $this->deprecated;
        $this->errors = $this->errors ?: array();

        if (!empty($config['params'])) {
            foreach ($config['params'] as $name => $param) {
                if ($param instanceof ApiParam) {
                    if (!$param->getName()) {
                        $param->setName($name);
                    }
                    $param->setParent($this);
                    $this->params[$name] = $param;
                } elseif (is_array($param)) {
                    // Lazily build ApiParams when they are requested
                    $param['name'] = $name;
                    $this->params[$name] = $param;
                    $this->param[$name]['parent'] = $this;
                }
            }
        }
    }

    /**
     * {@inheritdoc}
     */
    public function toArray()
    {
        $result = array('params' => array());
        foreach (array(
            'name', 'description', 'description_url', 'method', 'uri', 'class', 'deprecated', 'result_description',
            'result_type'
        ) as $check) {
            if ($value = $this->{$check}) {
                $result[$check] = $value;
            }
        }
        if (!empty($this->errors)) {
            $result['errors'] = $this->errors;
        }
        foreach ($this->getParams() as $key => $param) {
            $result['params'][$key] = $param->toArray();
        }

        return $result;
    }

    /**
     * {@inheritdoc}
     */
    public function getParams()
    {
        // Convert any lazily created parameter arrays into ApiParam objects
        foreach ($this->params as &$param) {
            if (!($param instanceof ApiParam)) {
                $param = new ApiParam($param);
            }
        }

        return $this->params;
    }

    /**
     * {@inheritdoc}
     */
    public function getParamNames()
    {
        return array_keys($this->params);
    }

    /**
     * {@inheritdoc}
     */
    public function hasParam($name)
    {
        return isset($this->params[$name]);
    }

    /**
     * {@inheritdoc}
     */
    public function getParam($param)
    {
        if (isset($this->params[$param])) {
            // Lazily convert param arrays into ApiParam objects
            if (!($this->params[$param] instanceof ApiParam)) {
                $this->params[$param] = new ApiParam($this->params[$param]);
            }
            return $this->params[$param];
        } else {
            return null;
        }
    }

    /**
     * Add a parameter to the command
     *
     * @param ApiParam $param Parameter to add
     *
     * @return self
     */
    public function addParam(ApiParam $param)
    {
        $this->params[$param->getName()] = $param;

        return $this;
    }

    /**
     * Remove a parameter from the command
     *
     * @param string $name Name of the parameter to remove
     *
     * @return self
     */
    public function removeParam($name)
    {
        unset($this->params[$name]);

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getMethod()
    {
        return $this->method;
    }

    /**
     * Set the method of the command
     *
     * @param string $method Method to set
     *
     * @return self
     */
    public function setMethod($method)
    {
        $this->method = $method;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getConcreteClass()
    {
        return $this->class;
    }

    /**
     * Set the concrete class of the command
     *
     * @param string $className Concrete class name
     *
     * @return self
     */
    public function setConcreteClass($className)
    {
        $this->class = $className;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set the name of the command
     *
     * @param string $name Name of the command
     *
     * @return self
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set the command's documentation
     *
     * @param string $description Command documentation
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getDescriptionUrl()
    {
        return $this->description_url;
    }

    /**
     * Set the URL pointing to additional documentation on the command
     *
     * @param string $descriptionUrl Documentation URL
     *
     * @return self
     */
    public function setDescriptionUrl($descriptionUrl)
    {
        $this->description_url = $descriptionUrl;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getResultType()
    {
        return $this->result_type;
    }

    /**
     * Set the type of result created by the command
     *
     * @param string $resultType Type of result
     *
     * @return self
     */
    public function setResultType($resultType)
    {
        $this->result_type = $resultType;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getResultDescription()
    {
        return $this->result_description;
    }

    /**
     * Set the result doc of the command
     *
     * @param string $resultDescription Documentation about the result of the command
     *
     * @return self
     */
    public function setResultDescription($resultDescription)
    {
        $this->result_description = $resultDescription;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function isDeprecated()
    {
        return $this->deprecated;
    }

    /**
     * Set whether or not the command is deprecated
     *
     * @param bool $isDeprecated Set to true to mark as deprecated
     *
     * @return self
     */
    public function setDeprecated($isDeprecated)
    {
        $this->deprecated = $isDeprecated;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getUri()
    {
        return $this->uri;
    }

    /**
     * Set the URI template of the command
     *
     * @param string $uri URI template to set
     *
     * @return self
     */
    public function setUri($uri)
    {
        $this->uri = $uri;

        return $this;
    }

    /**
     * Get the errors that could be encountered when executing the command
     *
     * @return array
     */
    public function getErrors()
    {
        return $this->errors;
    }

    /**
     * Add an error to the command
     *
     * @param string $code   HTTP response code
     * @param string $reason HTTP response reason phrase or information about the error
     * @param string $class  Exception class associated with the error
     *
     * @return self
     */
    public function addError($code, $reason, $class)
    {
        $this->errors[] = array('code' => $code, 'reason' => $reason, 'class' => $class);

        return $this;
    }

    /**
     * {@inheritdoc}
     * @throws ValidationException when validation errors occur
     */
    public function validate(Collection $config)
    {
        $errors = array();
        foreach ($this->getParams() as $name => $arg) {
            $value = $config->get($name);
            $result = $arg->process($value);
            if ($result !== true) {
                $errors = array_merge($errors, $result);
            }
            // Update the config value if it changed
            if ($value !== $config->get($name)) {
                $config->set($name, $value);
            }
        }

        if (!empty($errors)) {
            $e = new ValidationException('Validation errors: ' . implode("\n", $errors));
            $e->setErrors($errors);
            throw $e;
        }
    }
}
